
package edu.frontrange.csc241.a9.model;

import edu.frontrange.csc241.a9.controller.Controller;
import edu.frontrange.csc241.a9.controller.Controller.ValidationException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * A BasePlusCommissionEmployee is a CommissionEmployee who has a base salary in
 * addition to being paid a commission.
 * <p>
 * However, the database does not recognize a BasePlusCommissionEmployee as
 * being related to a CommissionEmployee, which leads to this class having to be
 * declared as a sub-class of Employee, and the code for dealing with
 * commissions having to be repeated in the class definition. This is truly a
 * result of the way in which the relationship exists in the database.
 *
 * @author	Deitel &amp; Associates, Inc. (see copyright notice at end)
 * @author	Dr. Bruce K. Haddon, Instructor
 * @version	1.3, 2013-03-21, CSC-241 Assignment 9, Exercise 28.4
 */
public class BasePlusCommissionEmployee extends Employee
{
/**
 * Gross weekly sales (value indicates this is not set).
 */
private int grossSales;

/**
 * Commission percentage (value indicates this is not set).
 */
private double commissionRate;

/**
 * Bonus amount (value indicates this is not set).
 */
private double bonus;

/**
 * Base salary for the employee, in dollars, before any commission is added
 * (value indicates this is not set).
 */
private double baseSalary;

String[][] payResults;
private final int row = 0;
private final int payGross = 1;
private final int commRate = 2;
private final int payBase = 3;
private final int payBonus = 4;
/**
 * The prepared form of the UPDATE statement
 */
private PreparedStatement preparedUpdateStatement;

/**
 * The prepared form of the DELETE statement
 */
private PreparedStatement preparedDeleteStatement;
private PreparedStatement prepareDeletePayStatement;
/**
 * The prepared form of the SELECT statement
 */
private PreparedStatement preparedSelectAllStatement;
/**
 * Constructor.
 *
 * @param firstName		employee's first name (assuming Western World naming).
 * @param lastName		employee's last name (assuming Western World naming).
 * @param socialSecurityNumber employee's social security number (assuming USA
 *						environment)
 * @param birthday		birth date
 * @param departmentName name of department for this employee
 * @param grossSales	gross sales achieved by this employee
 * @param commissionRate commission rate for these sales, for this employee
 * @param baseSalary	base salary before commission
 * @param bonus			the employee's bonus
 */
public BasePlusCommissionEmployee(String firstName, String lastName,
		String socialSecurityNumber, Date birthday, String departmentName,
		int grossSales, double commissionRate, double baseSalary, double bonus)
{
	super(firstName, lastName, socialSecurityNumber, birthday, departmentName);
	setGrossSales(grossSales);
	setCommissionRate(commissionRate);
	setBonus(bonus);
	setBaseSalary(baseSalary);
}

/**
 * Zero parameter Constructor.
 */
public BasePlusCommissionEmployee()
{
	super();
	resetGrossSales();
	resetCommissionRate();
	resetBonus();
	resetBaseSalary();
}
protected void prepareDeleteStatement(){
	
        super.prepareDeleteStatement();
	preparedDeleteStatement =       model.prepareDeleteStatement(table, columns);                
        
}

protected void prepareUpdateStatement()
{
	super.prepareUpdateStatement();        
        preparedUpdateStatement = model.prepareUpdateStatement(table, columns);
}
/**
 * Reset the employee's commission rate.
 */
public final void resetCommissionRate()
{
	/* This method is marked final, as it is called from a constructor. */
	this.commissionRate = -1.0;
}

/**
 * Setter for commission rate.
 *
 * @param commissionRate	commission rate, as fraction between 0 and 1.
 * @return					the normalized value
 */
public final double setCommissionRate(double commissionRate)
{
	/* This method is marked final, as it is called from a constructor. */
	return this.commissionRate = commissionRate < 0.0 ? 0.0:
									commissionRate > 1.0 ? 1.0:
										commissionRate;
}

/**
 * Getter for commission rate.
 *
 * @return	commission rate, as fraction between 0 and 1.
 */
public double getCommissionRate()
{
	return commissionRate;
}

/**
 * Reset the employee's gross weekly sales.
 */
public final void resetGrossSales()
{
	/* This method is marked final, as it is called from a constructor. */
	this.grossSales = -1;
}

/**
 * Setter for gross weekly sales.
 *
 * @param grossSales	total weekly sales, in whole dollars.
 * @return	normalized value
 */
public final int setGrossSales(int grossSales)
{
	/* This method is marked final, as it is called from a constructor. */
	return this.grossSales = grossSales < 0 ? 0: grossSales;
}

/**
 * Getter for gross weekly sales.
 *
 * @return	total weekly sales, in whole dollars.
 */
public int getGrossSales()
{
	return grossSales;
}

/**
 * Reset the employee's bonus.
 */
public final void resetBonus()
{
	/* This method is marked final, as it is called from a constructor. */
	this.bonus = -1.0;
}

/**
 * Setter for the employee's bonus.
 *
 * @param bonus	the bonus to set
 * @return	normalized value
 */
public final double setBonus(double bonus)
{
	/* This method is marked final, as it is called from a constructor. */
	return this.bonus = bonus < 0.0?0.0:bonus;
}

/**
 * Getter for the bonus.
 *
 * @return	the bonus
 */
public double getBonus()
{
	return bonus;
}

/**
 * Reset the employee's base salary.
 */
public final void resetBaseSalary()
{
	/* This method is marked final, as it is called from a constructor. */
	this.baseSalary = -1.0;
}

/**
 * Setter for base salary.
 *
 * @param baseSalary	base salary before commission.
 */
public final void setBaseSalary(double baseSalary)
{
	/* This method is marked final, as it is called from a constructor. */
	this.baseSalary = baseSalary < 0.0 ? 0.0: baseSalary;
}

/**
 * Getter for base salary.
 *
 * @return	base salary before commission.
 */
public double getBaseSalary()
{
	return baseSalary;
}

/**
 * Calculate earnings, which are the commissions and bonus for a commissioned
 * employee, which are in addition to the base salary.
 *
 * @return	total earnings
 * @see	CommissionEmployee#getPaymentAmount()
 */
@Override
public double getPaymentAmount()
{
	return getBaseSalary() + getCommissionRate() * getGrossSales() + getBonus();
}

/**
 * toString returns all the basic information about an instance of the class.
 *
 * @return		the String
 */
@Override
public String toString()
{
	return String.format("%s: %s%n%s, %,d; %s, %,.2f; %s: %,.2f; %s: %,.2f;",
			"base-salaried plus commission", super.toString(),
			"gross sales", getGrossSales(),
			"commission rate", getCommissionRate(),
			"base salary", getBaseSalary(),
			"bonus", getBonus());
}

//-------------------- Members added for Database support ----------------------

/**
 * Name of the table for BasePlusCommissionEmployees
 */
private static final String table = "BasePlusCommissionEmployees";

/**
 * Columns in the table for BasePlusCommissionEmployees
 */
private final String[] columns =
{
	"socialSecurityNumber",
	"grossSales",
	"commissionRate",
	"baseSalary",
	"bonus"
};

/**
 * The prepared form of the same statement
 */
private PreparedStatement preparedInsertStatement;

/**
 * Take the defined elements, and prepare it as a PreparedInsertStatement for
 * inserting an entry in the database. This is in its own method so that it
 * may override the method in Employee.
 */
@Override
protected void prepareInsertStatement()
{
	super.prepareInsertStatement();
	preparedInsertStatement =	model.prepareInsertStatement(table, columns);
}
protected void prepareDeletePayStatement(String table)
{       
        preparedDeleteStatement =	model.prepareDeleteStatement(table, columns);
}
/**
 * Verify record for this class before adding to the database.
 *
 * @return			empty message if the all the field verify correctly
 */


public String[][] getRecords()
{
        String [][] results = super.getRecords();       
        
	return results;
}

@Override
protected String verifyRecord()
{
	String message = super.verifyRecord() + System.getProperty("line.separator");

	if( getGrossSales() < 0 )
		message = String.format("%s%s%n", message, "Gross Sales missing");
	if( getCommissionRate() < 0.0 )
		message = String.format("%s%s%n", message, "Commission Rate is missing");
	if( getBaseSalary() < 0.0 )
		message = String.format("%s%s%n", message, "Base Salary is missing");
	if( getBonus() < 0.0 )
		message = String.format("%s%s%n", message, "Bonus is missing");

	return message.trim();
}

/**
 * Method for adding a record for this class to the database.
 *
 * @return			true if the adding of the record was successful
 * @throws SQLException if the database has a problem with the record
 * @throws IllegalStateException if all the information for writing to the
 *					database is not present
 */
@Override
public boolean setRecord() throws SQLException, IllegalStateException
{
	String message = verifyRecord();

	if( message.isEmpty() && super.setRecord() )
	{
		preparedInsertStatement.setString(1, getSocialSecurityNumber());
		preparedInsertStatement.setInt(2, getGrossSales());
		preparedInsertStatement.setDouble(3, getCommissionRate());
		preparedInsertStatement.setDouble(4, getBaseSalary());
		preparedInsertStatement.setDouble(5, getBonus());
		return !preparedInsertStatement.execute();
	}

	throw new IllegalStateException(message.trim());
}
public boolean updateRecord() throws SQLException, IllegalStateException
{
	String message = verifyRecord();
	if( message.isEmpty() && super.updateRecord() )
	{            
            preparedUpdateStatement.setInt(1, getGrossSales());
            preparedUpdateStatement.setDouble(2, getCommissionRate());
            preparedUpdateStatement.setDouble(3,getBaseSalary());
            preparedUpdateStatement.setDouble(4, getBonus());
            preparedUpdateStatement.setString(5, getSocialSecurityNumber());     
            return !preparedUpdateStatement.execute();
	}

	throw new IllegalStateException(message.trim());
}
public boolean setPayRecord(String ssn) throws SQLException, IllegalStateException
{
	String message = verifyRecord();
	if( message.isEmpty() && super.setRecord()  )
	{            
            preparedInsertStatement.setInt(1, getGrossSales());
            preparedInsertStatement.setDouble(2, getCommissionRate());
            preparedInsertStatement.setDouble(3, getBonus());
            preparedInsertStatement.setString(4, ssn);     
            return !preparedInsertStatement.execute();
	}

	throw new IllegalStateException(message.trim());
}
public boolean deleteRecord() throws SQLException
{
            prepareDeleteStatement();
            preparedDeleteStatement.setString(1, getSocialSecurityNumber()); 
            if(!preparedDeleteStatement.execute()) {
                super.deleteRecord();
            }           
            return !preparedDeleteStatement.execute();             
}

@Override
    public JPanel showInputView(String[] data) {
    

    preparedSelectAllStatement = model.prepareSelectAllStatement(table, columns);    
    payResults = model.getRecords(preparedSelectAllStatement, table, columns);   
        
    final JPanel panel1 = super.showInputView(data);
    final JPanel panel2 = new JPanel();
    controller.populateNextPayField(panel2, "Gross Sales", payResults[row][payGross],  new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{				
				try
				{
					setGrossSales(controller.integerField(e));
				}
				catch( Controller.ValidationException v )
				{
					JOptionPane.showMessageDialog(panel2, v.getMessage(), "",
										JOptionPane.ERROR_MESSAGE);
				}
			}
		});

	controller.populateNextPayField(panel2, "Commission Rate", payResults[row][commRate],  new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{				
				try
				{
					setCommissionRate(controller.currencyField(e));
				}
				catch( Controller.ValidationException v )
				{
					JOptionPane.showMessageDialog(panel2, v.getMessage(), "",
										JOptionPane.ERROR_MESSAGE);
				}
			}
		});
        controller.populateNextPayField(panel2, "Base Salary", payResults[row][payBase],  new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{				
				try
				{
					setBaseSalary(controller.currencyField(e));
				}
				catch( Controller.ValidationException v )
				{
					JOptionPane.showMessageDialog(panel2, v.getMessage(), "",
										JOptionPane.ERROR_MESSAGE);
				}
			}
		});

	controller.populateNextPayField(panel2, "Bonus", payResults[row][payBonus],   new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{				
				try
				{
					setBonus(controller.currencyField(e));
				}
				catch( Controller.ValidationException v )
				{
					JOptionPane.showMessageDialog(panel2, v.getMessage(), "",
										JOptionPane.ERROR_MESSAGE);
				}
			}
		});

	JPanel result = new JPanel();
	result.setLayout(new BoxLayout(result, BoxLayout.PAGE_AXIS));
	result.add(panel1);
	result.add(panel2);

	return result;
}

/**
 * Creates a JPanel (that can be shown on the GUI) for collecting the needed
 * information for this class.
 *
 * @return		a JPanel with the needed fields
 */
@Override
@SuppressWarnings("Convert2Lambda")
public JPanel getInputView()
{
	final JPanel panel1 = super.getInputView();
	final JPanel panel2 = new JPanel();
	controller.addNextField(panel2, "Base Salary", new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				resetBaseSalary();
				try
				{
					setBaseSalary(controller.currencyField(e));
				}
				catch( Controller.ValidationException v )
				{
					JOptionPane.showMessageDialog(panel2, v.getMessage(), "",
										JOptionPane.ERROR_MESSAGE);
				}
			}
		});

	controller.addNextField(panel2, "Gross Sales", new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				{
					resetGrossSales();
					try
					{
						setGrossSales(controller.integerField(e));
					}
					catch( Controller.ValidationException v )
					{
						JOptionPane.showMessageDialog(panel2, v.getMessage(), "",
										JOptionPane.ERROR_MESSAGE);
					}
				}
			}
		});

	controller.addNextField(panel2, "Commission Rate", new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				resetCommissionRate();
				try
				{
					setCommissionRate(controller.currencyField(e));
				}
				catch( Controller.ValidationException v )
				{
					JOptionPane.showMessageDialog(panel2, v.getMessage(), "",
										JOptionPane.ERROR_MESSAGE);
				}
			}
		});
	controller.addNextField(panel2, "Bonus", new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				resetBonus();
				try
				{
					setBonus(controller.currencyField(e));
				}
				catch( ValidationException v )
				{
					JOptionPane.showMessageDialog(panel2, v.getMessage(), "",
										JOptionPane.ERROR_MESSAGE);
				}
			}
		});


	JPanel result = new JPanel();
	result.setLayout(new BoxLayout(result, BoxLayout.PAGE_AXIS));
	result.add(panel1);
	result.add(panel2);

	return result;
}
}

/*------------------------------------------------------------------------*
 * (C) Copyright 1992-2010 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 *------------------------------------------------------------------------*/
